setwd("~/SI/PY/python_work/Chapter_15_Generating_Data")
reticulate::repl_python()
import matplotlib.pyplot as plt
squares = [1, 4, 9, 16, 25]
fig, ax = plt.subplots()
ax.plot(squares)
plt.show()
quit
library(reticulate)
py_install(packages = "matplotlib")
reticulate::repl_python()
import matplotlib.pyplot as plt
squares = [1, 4, 9, 16, 25]
fig, ax = plt.subplots()
ax.plot(squares)
plt.show()
import matplotlib.pyplot as plt
squares = [1, 4, 9, 16, 25]
fig, ax = plt.subplots()
ax.plot(squares, linewidth=3)
# Set chart title and label axes.
ax.set_title("Square Numbers", fontsize=24)
ax.set_xlabel("Value", fontsize=14)
ax.set_ylabel("Square of Value", fontsize=14)
# Set size of tick labels.
ax.tick_params(axis='both', labelsize=14)
plt.show()
import matplotlib.pyplot as plt
input_values = [1, 2, 3, 4, 5]
squares = [1, 4, 9, 16, 25]
fig, ax = plt.subplots()
ax.plot(input_values, squares, linewidth=3)
# Set chart title and label axes.
ax.set_title("Square Numbers", fontsize=24)
ax.set_xlabel("Value", fontsize=14)
ax.set_ylabel("Square of Value", fontsize=14)
# Set size of tick labels.
ax.tick_params(axis='both', labelsize=14)
plt.show()
import matplotlib.pyplot as plt
plt.style.available
import matplotlib.pyplot as plt
input_values = [1, 2, 3, 4, 5]
squares = [1, 4, 9, 16, 25]
plt.style.use('seaborn)
fig, ax = plt.subplots()
ax.plot(input_values, squares, linewidth=3)
# Set chart title and label axes.
ax.set_title("Square Numbers", fontsize=24)
ax.set_xlabel("Value", fontsize=14)
ax.set_ylabel("Square of Value", fontsize=14)
# Set size of tick labels.
ax.tick_params(axis='both', labelsize=14)
plt.show()
import matplotlib.pyplot as plt
input_values = [1, 2, 3, 4, 5]
squares = [1, 4, 9, 16, 25]
plt.style.use('seaborn')
fig, ax = plt.subplots()
ax.plot(input_values, squares, linewidth=3)
# Set chart title and label axes.
ax.set_title("Square Numbers", fontsize=24)
ax.set_xlabel("Value", fontsize=14)
ax.set_ylabel("Square of Value", fontsize=14)
# Set size of tick labels.
ax.tick_params(axis='both', labelsize=14)
plt.show()
plt.show()
import matplotlib.pyplot as plt
plt.style.use('seaborn')
fig, ax = plt.subplots()
ax.scatter(2, 4)
plt.show()
import matplotlib.pyplot as plt
plt.style.use('seaborn')
fig, ax = plt.subplots()
ax.scatter(2, 4, s=200)
# Set chart title and label axes.
ax.set_title("Square Numbers", fontsize=24)
ax.set_xlabel("Value", fontsize=14)
ax.set_ylabel("Square of Value", fontsize=14)
# Set size of tick labels.
ax.tick_params(axis='both', which='major', labelsize=14)
plt.show()
import matplotlib.pyplot as plt
x_values = [1, 2, 3, 4, 5]
y_values = [1, 4, 9, 16, 25]
plt.style.use('seaborn')
fig, ax = plt.subplots()
ax.scatter(x_values, y_values, s=100)
# Set chart title and label axes.
ax.set_title("Square Numbers", fontsize=24)
ax.set_xlabel("Value", fontsize=14)
ax.set_ylabel("Square of Value", fontsize=14)
# Set size of tick labels.
ax.tick_params(axis='both', which='major', labelsize=14)
plt.show()
import matplotlib.pyplot as plt
x_values = range(1, 1001)
y_values = [x**2 for x in x_values]
plt.style.use('seaborn')
fig, ax = plt.subplots()
ax.scatter(x_values, y_values, s=10)
# Set chart title and label axes.
ax.set_title("Square Numbers", fontsize=24)
ax.set_xlabel("Value", fontsize=14)
ax.set_ylabel("Square of Value", fontsize=14)
# Set size of tick labels.
ax.tick_params(axis='both', which='major', labelsize=14)
# Set the range for each axis.
ax.axis([0, 1100, 0, 1100000])
plt.show()
import matplotlib.pyplot as plt
x_values = range(1, 1001)
y_values = [x**2 for x in x_values]
plt.style.use('seaborn')
fig, ax = plt.subplots()
ax.scatter(x_values, y_values, c = 'red', s=10)
# Set chart title and label axes.
ax.set_title("Square Numbers", fontsize=24)
ax.set_xlabel("Value", fontsize=14)
ax.set_ylabel("Square of Value", fontsize=14)
# Set size of tick labels.
ax.tick_params(axis='both', which='major', labelsize=14)
# Set the range for each axis.
ax.axis([0, 1100, 0, 1100000])
plt.show()
import matplotlib.pyplot as plt
x_values = range(1, 1001)
y_values = [x**2 for x in x_values]
plt.style.use('seaborn')
fig, ax = plt.subplots()
ax.scatter(x_values, y_values, c = y_values, cmap=plt.cm.Blues, s=10)
# Set chart title and label axes.
ax.set_title("Square Numbers", fontsize=24)
ax.set_xlabel("Value", fontsize=14)
ax.set_ylabel("Square of Value", fontsize=14)
# Set size of tick labels.
ax.tick_params(axis='both', which='major', labelsize=14)
# Set the range for each axis.
ax.axis([0, 1100, 0, 1100000])
plt.show()
quit
setwd("~/SI/PY/python_work/Chapter_15_Generating_Data/15_1")
reticulate::repl_python()
import matplotlib.pyplot as plt
x_values = range(1, 5)
y_values = [x**3 for x in x_values]
plt.style.use('seaborn')
fig, ax = plt.subplots()
ax.scatter(x_values, y_values, s=10)
# Set chart title and label axes.
ax.set_title("Cube Numbers", fontsize=24)
ax.set_xlabel("Value", fontsize=14)
ax.set_ylabel("Cube of Value", fontsize=14)
# Set size of tick labels.
ax.tick_params(axis='both', which='major', labelsize=14)
# Set the range for each axis.
#ax.axis([0, 1100, 0, 1100000])
plt.show()
import matplotlib.pyplot as plt
x_values = range(1, 5)
y_values = [x**3 for x in x_values]
plt.style.use('seaborn')
fig, ax = plt.subplots()
ax.scatter(x_values, y_values, s=100)
# Set chart title and label axes.
ax.set_title("Cube Numbers", fontsize=24)
ax.set_xlabel("Value", fontsize=14)
ax.set_ylabel("Cube of Value", fontsize=14)
# Set size of tick labels.
ax.tick_params(axis='both', which='major', labelsize=14)
# Set the range for each axis.
#ax.axis([0, 1100, 0, 1100000])
plt.show()
import matplotlib.pyplot as plt
x_values = range(1, 5001)
y_values = [x**3 for x in x_values]
plt.style.use('seaborn')
fig, ax = plt.subplots()
ax.scatter(x_values, y_values, s=10)
# Set chart title and label axes.
ax.set_title("Cube Numbers", fontsize=24)
ax.set_xlabel("Value", fontsize=14)
ax.set_ylabel("Cube of Value", fontsize=14)
# Set size of tick labels.
ax.tick_params(axis='both', which='major', labelsize=14)
# Set the range for each axis.
#ax.axis([0, 1100, 0, 1100000])
plt.show()
import matplotlib.pyplot as plt
x_values = range(1, 5001)
y_values = [x**3 for x in x_values]
plt.style.use('seaborn')
fig, ax = plt.subplots()
ax.scatter(x_values, y_values, s=1)
# Set chart title and label axes.
ax.set_title("Cube Numbers", fontsize=24)
ax.set_xlabel("Value", fontsize=14)
ax.set_ylabel("Cube of Value", fontsize=14)
# Set size of tick labels.
ax.tick_params(axis='both', which='major', labelsize=14)
# Set the range for each axis.
#ax.axis([0, 1100, 0, 1100000])
plt.show()
quit
setwd("~/SI/PY/python_work/Chapter_15_Generating_Data/15_2")
reticulate::repl_python()
import matplotlib.pyplot as plt
x_values = range(1, 5001)
y_values = [x**3 for x in x_values]
plt.style.use('seaborn')
fig, ax = plt.subplots()
ax.scatter(x_values, y_values, c = y_values, cmap=plt.cm.Blues, s=10)
# Set chart title and label axes.
ax.set_title("Cube Numbers", fontsize=24)
ax.set_xlabel("Value", fontsize=14)
ax.set_ylabel("Cube of Value", fontsize=14)
# Set size of tick labels.
ax.tick_params(axis='both', which='major', labelsize=14)
# Set the range for each axis.
#ax.axis([0, 1100, 0, 1100000])
plt.show()
import matplotlib.pyplot as plt
x_values = range(1, 5001)
y_values = [x**3 for x in x_values]
plt.style.use('seaborn')
fig, ax = plt.subplots()
ax.scatter(x_values, y_values, c = y_values, cmap=plt.cm.Blues, s=10)
# Set chart title and label axes.
ax.set_title("Cube Numbers", fontsize=24)
ax.set_xlabel("Value", fontsize=14)
ax.set_ylabel("Cube of Value", fontsize=14)
# Set size of tick labels.
ax.tick_params(axis='both', which='major', labelsize=14)
# Set the range for each axis.
ax.axis([0, 1100, 0, 1100000])
plt.show()
install.packages("blogdown")
install.packages("blogdown")
blogdown::install_hugo()
reticulate::repl_python()
#Using List Compprehension this time
# Rolling Two Dice
from plotly.graph_objs import Scatter, Layout
from plotly import offline
from random_walk import RandomWalk
rw = RandomWalk(50_000)
rw.fill_walk()
point_numbers = list(range(rw.num_points))
## Create three D6 dice.
#die_1 = Die()
#die_2 = Die()
## Make some rolls, and store results in a list (using list comprehension).
"""
results = []
for roll_num in range(1_000):
result = die_1.roll() * die_2.roll()
results.append(result)
"""
#results = [die_1.roll() + die_2.roll() for roll_num in range(50_000)]
## Analyze the results (using list comprehension).
"""
frequencies = []
max_result = die_1.num_sides * die_2.num_sides
for value in range(1, max_result+1):
frequency = results.count(value)
frequencies.append(frequency)
"""
#max_result = die_1.num_sides + die_2.num_sides
#frequencies = [results.count(value) for value in range(2, max_result+1)]
## Visualize the results.
##rw = RandomWalk(50_000)
##rw.fill_walk()
##point_numbers = list(range(rw.num_points))
data = [Scatter(x=rw.x_values, y=rw.y_values)]
x_axis_config = {'title': 'X', 'dtick': 1}
y_axis_config = {'title': 'Y'}
my_layout = Layout(title='Random Walk',
xaxis=x_axis_config, yaxis=y_axis_config)
offline.plot({'data': data, 'layout': my_layout}, filename='rw.html')
#Using List Compprehension this time
# Rolling Two Dice
from plotly.graph_objs import Scatter, Layout
from plotly import offline
from random_walk import RandomWalk
rw = RandomWalk(50_000)
rw.fill_walk()
point_numbers = list(range(rw.num_points))
## Create three D6 dice.
#die_1 = Die()
#die_2 = Die()
## Make some rolls, and store results in a list (using list comprehension).
"""
results = []
for roll_num in range(1_000):
result = die_1.roll() * die_2.roll()
results.append(result)
"""
#results = [die_1.roll() + die_2.roll() for roll_num in range(50_000)]
## Analyze the results (using list comprehension).
"""
frequencies = []
max_result = die_1.num_sides * die_2.num_sides
for value in range(1, max_result+1):
frequency = results.count(value)
frequencies.append(frequency)
"""
#max_result = die_1.num_sides + die_2.num_sides
#frequencies = [results.count(value) for value in range(2, max_result+1)]
## Visualize the results.
##rw = RandomWalk(50_000)
##rw.fill_walk()
##point_numbers = list(range(rw.num_points))
data = [Scatter(x=rw.x_values, y=rw.y_values)]
x_axis_config = {'title': 'X', 'dtick': 1}
y_axis_config = {'title': 'Y'}
my_layout = Layout(title='Random Walk',
xaxis=x_axis_config, yaxis=y_axis_config)
offline.plot({'data': data, 'layout': my_layout}, filename='rw.html')
#Using List Compprehension this time
# Rolling Two Dice
from plotly.graph_objs import Scatter, Layout
from plotly import offline
from random_walk import RandomWalk
rw = RandomWalk(50_000)
rw.fill_walk()
point_numbers = list(range(rw.num_points))
## Create three D6 dice.
#die_1 = Die()
#die_2 = Die()
## Make some rolls, and store results in a list (using list comprehension).
"""
results = []
for roll_num in range(1_000):
result = die_1.roll() * die_2.roll()
results.append(result)
"""
#results = [die_1.roll() + die_2.roll() for roll_num in range(50_000)]
## Analyze the results (using list comprehension).
"""
frequencies = []
max_result = die_1.num_sides * die_2.num_sides
for value in range(1, max_result+1):
frequency = results.count(value)
frequencies.append(frequency)
"""
#max_result = die_1.num_sides + die_2.num_sides
#frequencies = [results.count(value) for value in range(2, max_result+1)]
## Visualize the results.
##rw = RandomWalk(50_000)
##rw.fill_walk()
##point_numbers = list(range(rw.num_points))
data = [Scatter(x=rw.x_values, y=rw.y_values)]
x_axis_config = {'title': 'X', 'dtick': 1}
y_axis_config = {'title': 'Y'}
my_layout = Layout(title='Random Walk',
xaxis=x_axis_config, yaxis=y_axis_config)
offline.plot({'data': data, 'layout': my_layout}, filename='rw.html')
#Using List Compprehension this time
# Rolling Two Dice
from plotly.graph_objs import Scatter, Layout as go
from plotly import offline
from random_walk import RandomWalk
rw = RandomWalk(50_000)
rw.fill_walk()
point_numbers = list(range(rw.num_points))
## Create three D6 dice.
#die_1 = Die()
#die_2 = Die()
## Make some rolls, and store results in a list (using list comprehension).
"""
results = []
for roll_num in range(1_000):
result = die_1.roll() * die_2.roll()
results.append(result)
"""
#results = [die_1.roll() + die_2.roll() for roll_num in range(50_000)]
## Analyze the results (using list comprehension).
"""
frequencies = []
max_result = die_1.num_sides * die_2.num_sides
for value in range(1, max_result+1):
frequency = results.count(value)
frequencies.append(frequency)
"""
#max_result = die_1.num_sides + die_2.num_sides
#frequencies = [results.count(value) for value in range(2, max_result+1)]
## Visualize the results.
##rw = RandomWalk(50_000)
##rw.fill_walk()
##point_numbers = list(range(rw.num_points))
data = [go.Scatter(x=rw.x_values, y=rw.y_values)]
x_axis_config = {'title': 'X', 'dtick': 1}
y_axis_config = {'title': 'Y'}
my_layout = Layout(title='Random Walk',
xaxis=x_axis_config, yaxis=y_axis_config)
offline.plot({'data': data, 'layout': my_layout}, filename='rw.html')
from plotly.graph_objs import Scatter, Layout as go
from plotly import offline
from random_walk import RandomWalk
rw = RandomWalk(50_000)
rw.fill_walk()
point_numbers = list(range(rw.num_points))
from plotly.graph_objs import Scatter, Layout as go
from plotly import offline
from random_walk import RandomWalk
quit
setwd("~/SI/PY/python_work/Chapter_15_Generating_Data/15_10")
reticulate::repl_python()
from random_walk import RandomWalk
rw = RandomWalk(50_000)
rw.fill_walk()
point_numbers = list(range(rw.num_points))
data = [go.Scatter(x=rw.x_values, y=rw.y_values)]
from plotly.graph_objs import Scatter as go
from plotly import offline
from random_walk import RandomWalk
rw = RandomWalk(50_000)
rw.fill_walk()
point_numbers = list(range(rw.num_points))
data = [go.Scatter(x=rw.x_values, y=rw.y_values)]
from plotly.graph_objs import as go
from plotly import offline
import plotly.graph_objs as go
from plotly import offline
from random_walk import RandomWalk
rw = RandomWalk(50_000)
rw.fill_walk()
point_numbers = list(range(rw.num_points))
data = [go.Scatter(x=rw.x_values, y=rw.y_values)]
offline.plot({'data': data}, filename='rw.html')
rw = RandomWalk()
rw.fill_walk()
point_numbers = list(range(rw.num_points))
data = [go.Scatter(x=rw.x_values, y=rw.y_values)]
offline.plot({'data': data}, filename='rw.html')
